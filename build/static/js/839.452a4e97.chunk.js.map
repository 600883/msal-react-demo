{"version":3,"file":"static/js/839.452a4e97.chunk.js","mappings":"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","sources":["../node_modules/@azure/msal-browser/src/naa/BridgeStatusCode.ts","../node_modules/@azure/msal-browser/src/naa/mapping/NestedAppAuthAdapter.ts","../node_modules/@azure/msal-browser/src/naa/BridgeError.ts","../node_modules/@azure/msal-browser/src/error/NestedAppAuthError.ts","../node_modules/@azure/msal-browser/src/controllers/NestedAppAuthController.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport const BridgeStatusCode = {\n    UserInteractionRequired: \"USER_INTERACTION_REQUIRED\",\n    UserCancel: \"USER_CANCEL\",\n    NoNetwork: \"NO_NETWORK\",\n    TransientError: \"TRANSIENT_ERROR\",\n    PersistentError: \"PERSISTENT_ERROR\",\n    Disabled: \"DISABLED\",\n    AccountUnavailable: \"ACCOUNT_UNAVAILABLE\",\n    NestedAppAuthUnavailable: \"NESTED_APP_AUTH_UNAVAILABLE\", // NAA is unavailable in the current context, can retry with standard browser based auth\n} as const;\nexport type BridgeStatusCode =\n    (typeof BridgeStatusCode)[keyof typeof BridgeStatusCode];\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { TokenRequest } from \"../TokenRequest\";\nimport { AccountInfo as NaaAccountInfo } from \"../AccountInfo\";\nimport { RedirectRequest } from \"../../request/RedirectRequest\";\nimport { PopupRequest } from \"../../request/PopupRequest\";\nimport {\n    AccountInfo as MsalAccountInfo,\n    AuthError,\n    ClientAuthError,\n    ClientConfigurationError,\n    InteractionRequiredAuthError,\n    ServerError,\n    ICrypto,\n    Logger,\n    AuthToken,\n    TokenClaims,\n    ClientAuthErrorCodes,\n    AuthenticationScheme,\n    RequestParameterBuilder,\n    StringUtils,\n    createClientAuthError,\n} from \"@azure/msal-common\";\nimport { isBridgeError } from \"../BridgeError\";\nimport { BridgeStatusCode } from \"../BridgeStatusCode\";\nimport { AuthenticationResult } from \"../../response/AuthenticationResult\";\nimport {} from \"../../error/BrowserAuthErrorCodes\";\nimport { AuthResult } from \"../AuthResult\";\n\nexport class NestedAppAuthAdapter {\n    protected crypto: ICrypto;\n    protected logger: Logger;\n    protected clientId: string;\n    protected clientCapabilities: string[];\n\n    constructor(\n        clientId: string,\n        clientCapabilities: string[],\n        crypto: ICrypto,\n        logger: Logger\n    ) {\n        this.clientId = clientId;\n        this.clientCapabilities = clientCapabilities;\n        this.crypto = crypto;\n        this.logger = logger;\n    }\n\n    public toNaaTokenRequest(\n        request: PopupRequest | RedirectRequest\n    ): TokenRequest {\n        let extraParams: Map<string, string>;\n        if (request.extraQueryParameters === undefined) {\n            extraParams = new Map<string, string>();\n        } else {\n            extraParams = new Map<string, string>(\n                Object.entries(request.extraQueryParameters)\n            );\n        }\n\n        const requestBuilder = new RequestParameterBuilder();\n        const claims = requestBuilder.addClientCapabilitiesToClaims(\n            request.claims,\n            this.clientCapabilities\n        );\n        const tokenRequest: TokenRequest = {\n            platformBrokerId: request.account?.homeAccountId,\n            clientId: this.clientId,\n            authority: request.authority,\n            scope: request.scopes.join(\" \"),\n            correlationId:\n                request.correlationId !== undefined\n                    ? request.correlationId\n                    : this.crypto.createNewGuid(),\n            claims: !StringUtils.isEmptyObj(claims) ? claims : undefined,\n            state: request.state,\n            authenticationScheme:\n                request.authenticationScheme || AuthenticationScheme.BEARER,\n            extraParameters: extraParams,\n        };\n\n        return tokenRequest;\n    }\n\n    public fromNaaTokenResponse(\n        request: TokenRequest,\n        response: AuthResult,\n        reqTimestamp: number\n    ): AuthenticationResult {\n        if (!response.token.id_token || !response.token.access_token) {\n            throw createClientAuthError(ClientAuthErrorCodes.nullOrEmptyToken);\n        }\n\n        const expiresOn = new Date(\n            (reqTimestamp + (response.token.expires_in || 0)) * 1000\n        );\n        const idTokenClaims = AuthToken.extractTokenClaims(\n            response.token.id_token,\n            this.crypto.base64Decode\n        );\n        const account = this.fromNaaAccountInfo(\n            response.account,\n            idTokenClaims\n        );\n        const scopes = response.token.scope || request.scope;\n\n        const authenticationResult: AuthenticationResult = {\n            authority: response.token.authority || account.environment,\n            uniqueId: account.localAccountId,\n            tenantId: account.tenantId,\n            scopes: scopes.split(\" \"),\n            account,\n            idToken: response.token.id_token,\n            idTokenClaims,\n            accessToken: response.token.access_token,\n            fromCache: true,\n            expiresOn: expiresOn,\n            tokenType:\n                request.authenticationScheme || AuthenticationScheme.BEARER,\n            correlationId: request.correlationId,\n            extExpiresOn: expiresOn,\n            state: request.state,\n        };\n\n        return authenticationResult;\n    }\n\n    /*\n     *  export type AccountInfo = {\n     *     homeAccountId: string;\n     *     environment: string;\n     *     tenantId: string;\n     *     username: string;\n     *     localAccountId: string;\n     *     name?: string;\n     *     idToken?: string;\n     *     idTokenClaims?: TokenClaims & {\n     *         [key: string]:\n     *             | string\n     *             | number\n     *             | string[]\n     *             | object\n     *             | undefined\n     *             | unknown;\n     *     };\n     *     nativeAccountId?: string;\n     *     authorityType?: string;\n     * };\n     */\n    public fromNaaAccountInfo(\n        fromAccount: NaaAccountInfo,\n        idTokenClaims?: TokenClaims\n    ): MsalAccountInfo {\n        const effectiveIdTokenClaims =\n            idTokenClaims || (fromAccount.idTokenClaims as TokenClaims);\n\n        const localAccountId =\n            fromAccount.localAccountId ||\n            effectiveIdTokenClaims?.oid ||\n            effectiveIdTokenClaims?.sub ||\n            \"\";\n\n        const tenantId =\n            fromAccount.tenantId || effectiveIdTokenClaims?.tid || \"\";\n\n        const homeAccountId =\n            fromAccount.homeAccountId || `${localAccountId}.${tenantId}`;\n\n        const username =\n            fromAccount.username ||\n            effectiveIdTokenClaims?.preferred_username ||\n            \"\";\n\n        const name = fromAccount.name || effectiveIdTokenClaims?.name;\n\n        const account: MsalAccountInfo = {\n            homeAccountId,\n            environment: fromAccount.environment,\n            tenantId,\n            username,\n            localAccountId,\n            name,\n            idToken: fromAccount.idToken,\n            idTokenClaims: effectiveIdTokenClaims,\n        };\n\n        return account;\n    }\n\n    /**\n     *\n     * @param error BridgeError\n     * @returns AuthError, ClientAuthError, ClientConfigurationError, ServerError, InteractionRequiredError\n     */\n    public fromBridgeError(\n        error: unknown\n    ):\n        | AuthError\n        | ClientAuthError\n        | ClientConfigurationError\n        | ServerError\n        | InteractionRequiredAuthError {\n        if (isBridgeError(error)) {\n            switch (error.status) {\n                case BridgeStatusCode.UserCancel:\n                    return new ClientAuthError(\n                        ClientAuthErrorCodes.userCanceled\n                    );\n                case BridgeStatusCode.NoNetwork:\n                    return new ClientAuthError(\n                        ClientAuthErrorCodes.noNetworkConnectivity\n                    );\n                case BridgeStatusCode.AccountUnavailable:\n                    return new ClientAuthError(\n                        ClientAuthErrorCodes.noAccountFound\n                    );\n                case BridgeStatusCode.Disabled:\n                    return new ClientAuthError(\n                        ClientAuthErrorCodes.nestedAppAuthBridgeDisabled\n                    );\n                case BridgeStatusCode.NestedAppAuthUnavailable:\n                    return new ClientAuthError(\n                        error.code ||\n                            ClientAuthErrorCodes.nestedAppAuthBridgeDisabled,\n                        error.description\n                    );\n                case BridgeStatusCode.TransientError:\n                case BridgeStatusCode.PersistentError:\n                    return new ServerError(error.code, error.description);\n                case BridgeStatusCode.UserInteractionRequired:\n                    return new InteractionRequiredAuthError(\n                        error.code,\n                        error.description\n                    );\n                default:\n                    return new AuthError(error.code, error.description);\n            }\n        } else {\n            return new AuthError(\"unknown_error\", \"An unknown error occurred\");\n        }\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BridgeStatusCode } from \"./BridgeStatusCode\";\n\nexport type BridgeError = {\n    status: BridgeStatusCode;\n    code?: string; // auth_flow_last_error such as invalid_grant\n    subError?: string; // server_suberror_code such as consent_required\n    description?: string;\n    properties?: object; // additional telemetry info\n};\n\nexport function isBridgeError(error: unknown): error is BridgeError {\n    return (error as BridgeError).status !== undefined;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"@azure/msal-common\";\n\n/**\n * NestedAppAuthErrorMessage class containing string constants used by error codes and messages.\n */\nexport const NestedAppAuthErrorMessage = {\n    unsupportedMethod: {\n        code: \"unsupported_method\",\n        desc: \"The PKCE code challenge and verifier could not be generated.\",\n    },\n};\n\nexport class NestedAppAuthError extends AuthError {\n    constructor(errorCode: string, errorMessage?: string) {\n        super(errorCode, errorMessage);\n\n        Object.setPrototypeOf(this, NestedAppAuthError.prototype);\n        this.name = \"NestedAppAuthError\";\n    }\n\n    public static createUnsupportedError(): NestedAppAuthError {\n        return new NestedAppAuthError(\n            NestedAppAuthErrorMessage.unsupportedMethod.code,\n            NestedAppAuthErrorMessage.unsupportedMethod.desc\n        );\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    CommonAuthorizationUrlRequest,\n    CommonSilentFlowRequest,\n    PerformanceCallbackFunction,\n    AccountInfo,\n    Logger,\n    ICrypto,\n    IPerformanceClient,\n    DEFAULT_CRYPTO_IMPLEMENTATION,\n    PerformanceEvents,\n    AccountFilter,\n    TimeUtils,\n} from \"@azure/msal-common\";\nimport { ITokenCache } from \"../cache/ITokenCache\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { ApiId, WrapperSKU, InteractionType } from \"../utils/BrowserConstants\";\nimport { IController } from \"./IController\";\nimport { TeamsAppOperatingContext } from \"../operatingcontext/TeamsAppOperatingContext\";\nimport { IBridgeProxy } from \"../naa/IBridgeProxy\";\nimport { CryptoOps } from \"../crypto/CryptoOps\";\nimport { NestedAppAuthAdapter } from \"../naa/mapping/NestedAppAuthAdapter\";\nimport { NestedAppAuthError } from \"../error/NestedAppAuthError\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { EventType } from \"../event/EventType\";\nimport { EventCallbackFunction, EventError } from \"../event/EventMessage\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\n\nexport class NestedAppAuthController implements IController {\n    // OperatingContext\n    protected readonly operatingContext: TeamsAppOperatingContext;\n\n    // BridgeProxy\n    protected readonly bridgeProxy: IBridgeProxy;\n\n    // Crypto interface implementation\n    protected readonly browserCrypto: ICrypto;\n\n    // Input configuration by developer/user\n    protected readonly config: BrowserConfiguration;\n\n    // Logger\n    protected logger: Logger;\n\n    // Performance telemetry client\n    protected readonly performanceClient: IPerformanceClient;\n\n    // EventHandler\n    protected readonly eventHandler: EventHandler;\n\n    // NestedAppAuthAdapter\n    protected readonly nestedAppAuthAdapter: NestedAppAuthAdapter;\n\n    constructor(operatingContext: TeamsAppOperatingContext) {\n        this.operatingContext = operatingContext;\n        const proxy = this.operatingContext.getBridgeProxy();\n        if (proxy !== undefined) {\n            this.bridgeProxy = proxy;\n        } else {\n            throw new Error(\"unexpected: bridgeProxy is undefined\");\n        }\n\n        // Set the configuration.\n        this.config = operatingContext.getConfig();\n\n        // Initialize logger\n        this.logger = this.operatingContext.getLogger();\n        // Initialize performance client\n        this.performanceClient = this.config.telemetry.client;\n\n        // Initialize the crypto class.\n        this.browserCrypto = operatingContext.isBrowserEnvironment()\n            ? new CryptoOps(this.logger, this.performanceClient)\n            : DEFAULT_CRYPTO_IMPLEMENTATION;\n\n        this.eventHandler = new EventHandler(this.logger, this.browserCrypto);\n\n        this.nestedAppAuthAdapter = new NestedAppAuthAdapter(\n            this.config.auth.clientId,\n            this.config.auth.clientCapabilities,\n            this.browserCrypto,\n            this.logger\n        );\n    }\n    getBrowserStorage(): BrowserCacheManager {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    getEventHandler(): EventHandler {\n        return this.eventHandler;\n    }\n\n    static async createController(\n        operatingContext: TeamsAppOperatingContext\n    ): Promise<IController> {\n        const controller = new NestedAppAuthController(operatingContext);\n        return Promise.resolve(controller);\n    }\n\n    initialize(): Promise<void> {\n        // do nothing not required by this controller\n        return Promise.resolve();\n    }\n\n    private async acquireTokenInteractive(\n        request: PopupRequest | RedirectRequest\n    ): Promise<AuthenticationResult> {\n        this.eventHandler.emitEvent(\n            EventType.ACQUIRE_TOKEN_START,\n            InteractionType.Popup,\n            request\n        );\n\n        const atPopupMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.AcquireTokenPopup,\n            request.correlationId\n        );\n\n        atPopupMeasurement?.add({ nestedAppAuthRequest: true });\n\n        try {\n            const naaRequest =\n                this.nestedAppAuthAdapter.toNaaTokenRequest(request);\n            const reqTimestamp = TimeUtils.nowSeconds();\n            const response = await this.bridgeProxy.getTokenInteractive(\n                naaRequest\n            );\n            const result: AuthenticationResult =\n                this.nestedAppAuthAdapter.fromNaaTokenResponse(\n                    naaRequest,\n                    response,\n                    reqTimestamp\n                );\n\n            this.operatingContext.setActiveAccount(result.account);\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_SUCCESS,\n                InteractionType.Popup,\n                result\n            );\n\n            atPopupMeasurement.add({\n                accessTokenSize: result.accessToken.length,\n                idTokenSize: result.idToken.length,\n            });\n\n            atPopupMeasurement.end({\n                success: true,\n                requestId: result.requestId,\n            });\n\n            return result;\n        } catch (e) {\n            const error = this.nestedAppAuthAdapter.fromBridgeError(e);\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_FAILURE,\n                InteractionType.Popup,\n                null,\n                e as EventError\n            );\n\n            atPopupMeasurement.end({\n                errorCode: error.errorCode,\n                subErrorCode: error.subError,\n                success: false,\n            });\n\n            throw error;\n        }\n    }\n\n    private async acquireTokenSilentInternal(\n        request: SilentRequest\n    ): Promise<AuthenticationResult> {\n        this.eventHandler.emitEvent(\n            EventType.ACQUIRE_TOKEN_START,\n            InteractionType.Silent,\n            request\n        );\n\n        const ssoSilentMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.SsoSilent,\n            request.correlationId\n        );\n\n        ssoSilentMeasurement?.increment({\n            visibilityChangeCount: 0,\n        });\n\n        ssoSilentMeasurement?.add({\n            nestedAppAuthRequest: true,\n        });\n\n        try {\n            const naaRequest =\n                this.nestedAppAuthAdapter.toNaaTokenRequest(request);\n            const reqTimestamp = TimeUtils.nowSeconds();\n            const response = await this.bridgeProxy.getTokenSilent(naaRequest);\n\n            const result: AuthenticationResult =\n                this.nestedAppAuthAdapter.fromNaaTokenResponse(\n                    naaRequest,\n                    response,\n                    reqTimestamp\n                );\n\n            this.operatingContext.setActiveAccount(result.account);\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_SUCCESS,\n                InteractionType.Silent,\n                result\n            );\n            ssoSilentMeasurement?.add({\n                accessTokenSize: result.accessToken.length,\n                idTokenSize: result.idToken.length,\n            });\n            ssoSilentMeasurement?.end({\n                success: true,\n                requestId: result.requestId,\n            });\n            return result;\n        } catch (e) {\n            const error = this.nestedAppAuthAdapter.fromBridgeError(e);\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_FAILURE,\n                InteractionType.Silent,\n                null,\n                e as EventError\n            );\n            ssoSilentMeasurement?.end({\n                errorCode: error.errorCode,\n                subErrorCode: error.subError,\n                success: false,\n            });\n            throw error;\n        }\n    }\n\n    async acquireTokenPopup(\n        request: PopupRequest\n    ): Promise<AuthenticationResult> {\n        return this.acquireTokenInteractive(request);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    acquireTokenRedirect(request: RedirectRequest): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    async acquireTokenSilent(\n        silentRequest: SilentRequest\n    ): Promise<AuthenticationResult> {\n        return this.acquireTokenSilentInternal(silentRequest);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    acquireTokenByCode(\n        request: AuthorizationCodeRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    acquireTokenNative(\n        request: // eslint-disable-line @typescript-eslint/no-unused-vars\n        | SilentRequest\n            | Partial<\n                  Omit<\n                      CommonAuthorizationUrlRequest,\n                      | \"requestedClaimsHash\"\n                      | \"responseMode\"\n                      | \"codeChallenge\"\n                      | \"codeChallengeMethod\"\n                      | \"nativeBroker\"\n                  >\n              >\n            | PopupRequest,\n        apiId: ApiId, // eslint-disable-line @typescript-eslint/no-unused-vars\n        accountId?: string | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    acquireTokenByRefreshToken(\n        commonRequest: CommonSilentFlowRequest, // eslint-disable-line @typescript-eslint/no-unused-vars\n        silentRequest: SilentRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    /**\n     * Adds event callbacks to array\n     * @param callback\n     */\n    addEventCallback(callback: EventCallbackFunction): string | null {\n        return this.eventHandler.addEventCallback(callback);\n    }\n\n    /**\n     * Removes callback with provided id from callback array\n     * @param callbackId\n     */\n    removeEventCallback(callbackId: string): void {\n        this.eventHandler.removeEventCallback(callbackId);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    removePerformanceCallback(callbackId: string): boolean {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    enableAccountStorageEvents(): void {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    disableAccountStorageEvents(): void {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getAccount(accountFilter: AccountFilter): AccountInfo | null {\n        throw NestedAppAuthError.createUnsupportedError();\n        // TODO: Look at standard implementation\n    }\n\n    getAccountByHomeId(homeAccountId: string): AccountInfo | null {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            if (currentAccount.homeAccountId === homeAccountId) {\n                return this.nestedAppAuthAdapter.fromNaaAccountInfo(\n                    currentAccount\n                );\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    getAccountByLocalId(localId: string): AccountInfo | null {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            if (currentAccount.localAccountId === localId) {\n                return this.nestedAppAuthAdapter.fromNaaAccountInfo(\n                    currentAccount\n                );\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    getAccountByUsername(userName: string): AccountInfo | null {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            if (currentAccount.username === userName) {\n                return this.nestedAppAuthAdapter.fromNaaAccountInfo(\n                    currentAccount\n                );\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n    getAllAccounts(): AccountInfo[] {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            return [\n                this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount),\n            ];\n        } else {\n            return [];\n        }\n    }\n    handleRedirectPromise(\n        hash?: string | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult | null> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    loginPopup(\n        request?: PopupRequest | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult> {\n        if (request !== undefined) {\n            return this.acquireTokenInteractive(request);\n        } else {\n            throw NestedAppAuthError.createUnsupportedError();\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    loginRedirect(request?: RedirectRequest | undefined): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    logout(logoutRequest?: EndSessionRequest | undefined): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    logoutRedirect(\n        logoutRequest?: EndSessionRequest | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    logoutPopup(\n        logoutRequest?: EndSessionPopupRequest | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    ssoSilent(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        request: Partial<\n            Omit<\n                CommonAuthorizationUrlRequest,\n                | \"requestedClaimsHash\"\n                | \"responseMode\"\n                | \"codeChallenge\"\n                | \"codeChallengeMethod\"\n                | \"nativeBroker\"\n            >\n        >\n    ): Promise<AuthenticationResult> {\n        return this.acquireTokenSilentInternal(request as SilentRequest);\n    }\n    getTokenCache(): ITokenCache {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    /**\n     * Returns the logger instance\n     */\n    public getLogger(): Logger {\n        return this.logger;\n    }\n\n    /**\n     * Replaces the default logger set in configurations with new Logger with new configurations\n     * @param logger Logger instance\n     */\n    setLogger(logger: Logger): void {\n        this.logger = logger;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setActiveAccount(account: AccountInfo | null): void {\n        /*\n         * StandardController uses this to allow the developer to set the active account\n         * in the nested app auth scenario the active account is controlled by the app hosting the nested app\n         */\n        this.logger.warning(\"nestedAppAuth does not support setActiveAccount\");\n        return;\n    }\n    getActiveAccount(): AccountInfo | null {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            return this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount);\n        } else {\n            return null;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    initializeWrapperLibrary(sku: WrapperSKU, version: string): void {\n        /*\n         * Standard controller uses this to set the sku and version of the wrapper library in the storage\n         * we do nothing here\n         */\n        return;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setNavigationClient(navigationClient: INavigationClient): void {\n        this.logger.warning(\n            \"setNavigationClient is not supported in nested app auth\"\n        );\n    }\n    getConfiguration(): BrowserConfiguration {\n        return this.config;\n    }\n    isBrowserEnv(): boolean {\n        return this.operatingContext.isBrowserEnvironment();\n    }\n    getBrowserCrypto(): ICrypto {\n        return this.browserCrypto;\n    }\n    getPerformanceClient(): IPerformanceClient {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    getRedirectResponse(): Map<string, Promise<AuthenticationResult | null>> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    preflightBrowserEnvironmentCheck(\n        interactionType: InteractionType, // eslint-disable-line @typescript-eslint/no-unused-vars\n        setInteractionInProgress?: boolean | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): void {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async clearCache(logoutRequest?: ClearCacheRequest): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async hydrateCache(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        result: AuthenticationResult,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        request:\n            | SilentRequest\n            | SsoSilentRequest\n            | RedirectRequest\n            | PopupRequest\n    ): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n}\n"],"names":["BridgeStatusCode","NestedAppAuthAdapter","clientId","clientCapabilities","crypto","logger","this","request","extraParams","undefined","extraQueryParameters","Map","Object","entries","claims","RequestParameterBuilder","addClientCapabilitiesToClaims","platformBrokerId","account","homeAccountId","authority","scope","scopes","join","correlationId","createNewGuid","StringUtils","state","authenticationScheme","AuthenticationScheme","extraParameters","response","reqTimestamp","token","id_token","access_token","createClientAuthError","ClientAuthErrorCodes","expiresOn","Date","expires_in","idTokenClaims","AuthToken","base64Decode","fromNaaAccountInfo","environment","uniqueId","localAccountId","tenantId","split","idToken","accessToken","fromCache","tokenType","extExpiresOn","fromAccount","effectiveIdTokenClaims","oid","sub","tid","username","preferred_username","name","error","status","isBridgeError","AuthError","ClientAuthError","code","description","ServerError","InteractionRequiredAuthError","NestedAppAuthErrorMessage","desc","NestedAppAuthError","errorCode","errorMessage","setPrototypeOf","prototype","NestedAppAuthController","operatingContext","proxy","getBridgeProxy","Error","bridgeProxy","config","getConfig","getLogger","performanceClient","telemetry","client","browserCrypto","isBrowserEnvironment","CryptoOps","DEFAULT_CRYPTO_IMPLEMENTATION","eventHandler","EventHandler","nestedAppAuthAdapter","auth","createUnsupportedError","Promise","resolve","emitEvent","EventType","InteractionType","atPopupMeasurement","startMeasurement","PerformanceEvents","add","nestedAppAuthRequest","naaRequest","toNaaTokenRequest","TimeUtils","getTokenInteractive","result","fromNaaTokenResponse","setActiveAccount","accessTokenSize","length","idTokenSize","end","success","requestId","fromBridgeError","subErrorCode","subError","ssoSilentMeasurement","increment","visibilityChangeCount","getTokenSilent","acquireTokenInteractive","silentRequest","acquireTokenSilentInternal","apiId","accountId","commonRequest","callback","addEventCallback","callbackId","removeEventCallback","accountFilter","currentAccount","getActiveAccount","localId","userName","hash","logoutRequest","warning","sku","version","navigationClient","interactionType","setInteractionInProgress","controller"],"sourceRoot":""}